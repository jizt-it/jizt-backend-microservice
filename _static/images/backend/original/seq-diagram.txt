sequenceDiagram
    participant cl as Client
    participant in as Ingress
    participant di as Dispatcher
    participant bd as Database
    participant pr as Pre-processor
    participant co as Encoder
    participant ge as Summarizer
    participant po as Post-processor

    cl->>+in: POST
    activate cl
    in->>+di: POST
    di->>di: get_summary_id(source, model, params)
    di->>+bd: get_summary(summary_id)
    bd-->>-di: summary
    di-->>-in: summary
    in-->>-cl: summary
    deactivate cl
    Note left of cl: summary.output<br>could be null
    alt if summary.output == null
        Note right of di: Summary generation
        di->>+pr: produceMsg(summary_id, source, model, params)
        activate di
        pr->>pr: consumeMsg()
        pr->>pr: preprocess(source)
        pr->>co: produceMsg(summary_id,<br>preprocessed_text,<br>model, params))
        deactivate pr
        activate co
        co->>co: consumeMsg()
        co->>co: encode(preprocessed_text)
        co->>+ge: produceMsg(summary_id,<br>encoded_text, <br>model, params)
        deactivate co
        activate ge
        ge->>ge: consumeMsg()
        ge->>ge: summarize(encoded_text)
        ge->>+po: produceMsg(summary_id,<br>summary)
        deactivate ge
        activate po
        po->>po: consumeMsg()
        po->>po: postprocess(summary)
        po-->>-di: produceMsg(summary_id, summary)
        di->>di: consumeMsg()
        di->>+bd: update(summary)
        bd-->>-di: «summary updated»
        deactivate di
    end

    loop while summary.output == null
        cl->>+in: GET
        activate cl
        in->>+di: GET
        di->>+bd: get_summary(summary_id)
        bd-->>-di: summary
        di-->>-in: summary
        in-->>-cl: summary
        deactivate cl
    end
